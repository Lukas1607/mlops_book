Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/anaconda3/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/anaconda3/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/anaconda3/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#---------------------------------------
# SETUP

# The DAG object; we'll need this to instantiate a DAG
from airflow import DAG

# Operators; we need this to operate!
from airflow.operators.bash import BashOperator

# Module for manipulating dates and times
from datetime import datetime, timedelta

    # To change timezones, use Pendulum https://pendulum.eustace.io/

# Some convenience functions
from textwrap import dedent

#---------------------------------------
# DEFAULT DAG ARGUMENTS

with DAG(
    # the following string is the unique identifier for your DAG
    'airflow_mlops', 
    # These args will get passed on to each operator
    # You can override them on a per-task basis during operator initialization
    default_args={
        'depends_on_past': True,
        'email': ['my-email@example.com'],
        'email_on_failure': False,
        'email_on_retry': False,
        'retries': 1,
        'retry_delay': timedelta(minutes=5),
        # 'queue': 'bash_queue',
        # 'pool': 'backfill',
        # 'priority_weight': 10,
        # 'end_date': datetime(2022, 6, 1),
        # 'wait_for_downstream': False,
        # 'sla': timedelta(hours=2),
        # 'execution_timeout': timedelta(seconds=300),
        # 'on_failure_callback': some_function,
        # 'on_success_callback': some_other_function,
        # 'on_retry_callback': another_function,
        # 'sla_miss_callback': yet_another_function,
        # 'trigger_rule': 'all_success'
    },
    description='Automatisierung der Datacorrection',
    schedule_interval=timedelta(days=1),
    start_date=datetime(2022, 1, 1),
    catchup=False,
    tags=['mlops'],

) as dag:


    #---------------------------------------
    # DEFINE OPERATERS
    
    t1 = BashOperator(
        depends_on_past=False,
        task_id='data_prep',
        bash_command='python /Users/lukas/airflow/dags/airflow-dag-reg/data_prep.py',
    )                      

    # Task documentation
    t1.doc_md = dedent(
        """\
    #### Task Documentation
    
    Data preparation

    """
    )

    # Hier k√∂nnten weitere tasks definiert werden (Beispiel Modellerstellung und Training)
    # t2 = ....

    #----------------
    # SETTING UP DEPENDENCIES 
    # Ausf√ºhrung der definierten Tasks (t1) -> hier k√∂nnten weitere Tasks ausgef√ºhrt werden (Beispiel t2...)

    t1
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m/var/folders/df/nc1vtthj247d1h5l5689kdxh0000gn/T/ipykernel_49972/3658044051.py[0m in [0;36m<module>[0;34m[0m
[1;32m      3[0m [0;34m[0m[0m
[1;32m      4[0m [0;31m# The DAG object; we'll need this to instantiate a DAG[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mfrom[0m [0mairflow[0m [0;32mimport[0m [0mDAG[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0;34m[0m[0m
[1;32m      7[0m [0;31m# Operators; we need this to operate![0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'airflow'
ModuleNotFoundError: No module named 'airflow'

